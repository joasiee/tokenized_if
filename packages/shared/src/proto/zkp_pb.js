// source: zkp.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.zkp.Circuit', null, global);
goog.exportSymbol('proto.zkp.Circuit.VerificationKey', null, global);
goog.exportSymbol('proto.zkp.Circuit.VerificationKey.G1Affine', null, global);
goog.exportSymbol('proto.zkp.Circuit.VerificationKey.G2Affine', null, global);
goog.exportSymbol('proto.zkp.GetCircuitRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zkp.GetCircuitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zkp.GetCircuitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zkp.GetCircuitRequest.displayName = 'proto.zkp.GetCircuitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zkp.Circuit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zkp.Circuit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zkp.Circuit.displayName = 'proto.zkp.Circuit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zkp.Circuit.VerificationKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zkp.Circuit.VerificationKey.repeatedFields_, null);
};
goog.inherits(proto.zkp.Circuit.VerificationKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zkp.Circuit.VerificationKey.displayName = 'proto.zkp.Circuit.VerificationKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zkp.Circuit.VerificationKey.G1Affine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zkp.Circuit.VerificationKey.G1Affine.repeatedFields_, null);
};
goog.inherits(proto.zkp.Circuit.VerificationKey.G1Affine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zkp.Circuit.VerificationKey.G1Affine.displayName = 'proto.zkp.Circuit.VerificationKey.G1Affine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zkp.Circuit.VerificationKey.G2Affine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zkp.Circuit.VerificationKey.G2Affine.repeatedFields_, null);
};
goog.inherits(proto.zkp.Circuit.VerificationKey.G2Affine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zkp.Circuit.VerificationKey.G2Affine.displayName = 'proto.zkp.Circuit.VerificationKey.G2Affine';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zkp.GetCircuitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zkp.GetCircuitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zkp.GetCircuitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zkp.GetCircuitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zkp.GetCircuitRequest}
 */
proto.zkp.GetCircuitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zkp.GetCircuitRequest;
  return proto.zkp.GetCircuitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zkp.GetCircuitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zkp.GetCircuitRequest}
 */
proto.zkp.GetCircuitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zkp.GetCircuitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zkp.GetCircuitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zkp.GetCircuitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zkp.GetCircuitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.zkp.GetCircuitRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zkp.GetCircuitRequest} returns this
 */
proto.zkp.GetCircuitRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zkp.Circuit.prototype.toObject = function(opt_includeInstance) {
  return proto.zkp.Circuit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zkp.Circuit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zkp.Circuit.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    program: msg.getProgram_asB64(),
    contract: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pk: msg.getPk_asB64(),
    vk: (f = msg.getVk()) && proto.zkp.Circuit.VerificationKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zkp.Circuit}
 */
proto.zkp.Circuit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zkp.Circuit;
  return proto.zkp.Circuit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zkp.Circuit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zkp.Circuit}
 */
proto.zkp.Circuit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProgram(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPk(value);
      break;
    case 5:
      var value = new proto.zkp.Circuit.VerificationKey;
      reader.readMessage(value,proto.zkp.Circuit.VerificationKey.deserializeBinaryFromReader);
      msg.setVk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zkp.Circuit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zkp.Circuit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zkp.Circuit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zkp.Circuit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProgram_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getVk();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.zkp.Circuit.VerificationKey.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zkp.Circuit.VerificationKey.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zkp.Circuit.VerificationKey.prototype.toObject = function(opt_includeInstance) {
  return proto.zkp.Circuit.VerificationKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zkp.Circuit.VerificationKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zkp.Circuit.VerificationKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    alpha: (f = msg.getAlpha()) && proto.zkp.Circuit.VerificationKey.G1Affine.toObject(includeInstance, f),
    beta: (f = msg.getBeta()) && proto.zkp.Circuit.VerificationKey.G2Affine.toObject(includeInstance, f),
    gamma: (f = msg.getGamma()) && proto.zkp.Circuit.VerificationKey.G2Affine.toObject(includeInstance, f),
    delta: (f = msg.getDelta()) && proto.zkp.Circuit.VerificationKey.G2Affine.toObject(includeInstance, f),
    gammaAbcList: jspb.Message.toObjectList(msg.getGammaAbcList(),
    proto.zkp.Circuit.VerificationKey.G1Affine.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zkp.Circuit.VerificationKey}
 */
proto.zkp.Circuit.VerificationKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zkp.Circuit.VerificationKey;
  return proto.zkp.Circuit.VerificationKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zkp.Circuit.VerificationKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zkp.Circuit.VerificationKey}
 */
proto.zkp.Circuit.VerificationKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zkp.Circuit.VerificationKey.G1Affine;
      reader.readMessage(value,proto.zkp.Circuit.VerificationKey.G1Affine.deserializeBinaryFromReader);
      msg.setAlpha(value);
      break;
    case 2:
      var value = new proto.zkp.Circuit.VerificationKey.G2Affine;
      reader.readMessage(value,proto.zkp.Circuit.VerificationKey.G2Affine.deserializeBinaryFromReader);
      msg.setBeta(value);
      break;
    case 3:
      var value = new proto.zkp.Circuit.VerificationKey.G2Affine;
      reader.readMessage(value,proto.zkp.Circuit.VerificationKey.G2Affine.deserializeBinaryFromReader);
      msg.setGamma(value);
      break;
    case 4:
      var value = new proto.zkp.Circuit.VerificationKey.G2Affine;
      reader.readMessage(value,proto.zkp.Circuit.VerificationKey.G2Affine.deserializeBinaryFromReader);
      msg.setDelta(value);
      break;
    case 5:
      var value = new proto.zkp.Circuit.VerificationKey.G1Affine;
      reader.readMessage(value,proto.zkp.Circuit.VerificationKey.G1Affine.deserializeBinaryFromReader);
      msg.addGammaAbc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zkp.Circuit.VerificationKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zkp.Circuit.VerificationKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zkp.Circuit.VerificationKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zkp.Circuit.VerificationKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlpha();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.zkp.Circuit.VerificationKey.G1Affine.serializeBinaryToWriter
    );
  }
  f = message.getBeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.zkp.Circuit.VerificationKey.G2Affine.serializeBinaryToWriter
    );
  }
  f = message.getGamma();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.zkp.Circuit.VerificationKey.G2Affine.serializeBinaryToWriter
    );
  }
  f = message.getDelta();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.zkp.Circuit.VerificationKey.G2Affine.serializeBinaryToWriter
    );
  }
  f = message.getGammaAbcList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.zkp.Circuit.VerificationKey.G1Affine.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zkp.Circuit.VerificationKey.G1Affine.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zkp.Circuit.VerificationKey.G1Affine.prototype.toObject = function(opt_includeInstance) {
  return proto.zkp.Circuit.VerificationKey.G1Affine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zkp.Circuit.VerificationKey.G1Affine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zkp.Circuit.VerificationKey.G1Affine.toObject = function(includeInstance, msg) {
  var f, obj = {
    fqList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zkp.Circuit.VerificationKey.G1Affine}
 */
proto.zkp.Circuit.VerificationKey.G1Affine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zkp.Circuit.VerificationKey.G1Affine;
  return proto.zkp.Circuit.VerificationKey.G1Affine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zkp.Circuit.VerificationKey.G1Affine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zkp.Circuit.VerificationKey.G1Affine}
 */
proto.zkp.Circuit.VerificationKey.G1Affine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zkp.Circuit.VerificationKey.G1Affine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zkp.Circuit.VerificationKey.G1Affine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zkp.Circuit.VerificationKey.G1Affine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zkp.Circuit.VerificationKey.G1Affine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFqList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string fq = 1;
 * @return {!Array<string>}
 */
proto.zkp.Circuit.VerificationKey.G1Affine.prototype.getFqList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.zkp.Circuit.VerificationKey.G1Affine} returns this
 */
proto.zkp.Circuit.VerificationKey.G1Affine.prototype.setFqList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.zkp.Circuit.VerificationKey.G1Affine} returns this
 */
proto.zkp.Circuit.VerificationKey.G1Affine.prototype.addFq = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zkp.Circuit.VerificationKey.G1Affine} returns this
 */
proto.zkp.Circuit.VerificationKey.G1Affine.prototype.clearFqList = function() {
  return this.setFqList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zkp.Circuit.VerificationKey.G2Affine.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zkp.Circuit.VerificationKey.G2Affine.prototype.toObject = function(opt_includeInstance) {
  return proto.zkp.Circuit.VerificationKey.G2Affine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zkp.Circuit.VerificationKey.G2Affine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zkp.Circuit.VerificationKey.G2Affine.toObject = function(includeInstance, msg) {
  var f, obj = {
    fq2List: jspb.Message.toObjectList(msg.getFq2List(),
    proto.zkp.Circuit.VerificationKey.G1Affine.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zkp.Circuit.VerificationKey.G2Affine}
 */
proto.zkp.Circuit.VerificationKey.G2Affine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zkp.Circuit.VerificationKey.G2Affine;
  return proto.zkp.Circuit.VerificationKey.G2Affine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zkp.Circuit.VerificationKey.G2Affine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zkp.Circuit.VerificationKey.G2Affine}
 */
proto.zkp.Circuit.VerificationKey.G2Affine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zkp.Circuit.VerificationKey.G1Affine;
      reader.readMessage(value,proto.zkp.Circuit.VerificationKey.G1Affine.deserializeBinaryFromReader);
      msg.addFq2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zkp.Circuit.VerificationKey.G2Affine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zkp.Circuit.VerificationKey.G2Affine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zkp.Circuit.VerificationKey.G2Affine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zkp.Circuit.VerificationKey.G2Affine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFq2List();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.zkp.Circuit.VerificationKey.G1Affine.serializeBinaryToWriter
    );
  }
};


/**
 * repeated G1Affine fq2 = 1;
 * @return {!Array<!proto.zkp.Circuit.VerificationKey.G1Affine>}
 */
proto.zkp.Circuit.VerificationKey.G2Affine.prototype.getFq2List = function() {
  return /** @type{!Array<!proto.zkp.Circuit.VerificationKey.G1Affine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zkp.Circuit.VerificationKey.G1Affine, 1));
};


/**
 * @param {!Array<!proto.zkp.Circuit.VerificationKey.G1Affine>} value
 * @return {!proto.zkp.Circuit.VerificationKey.G2Affine} returns this
*/
proto.zkp.Circuit.VerificationKey.G2Affine.prototype.setFq2List = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.zkp.Circuit.VerificationKey.G1Affine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zkp.Circuit.VerificationKey.G1Affine}
 */
proto.zkp.Circuit.VerificationKey.G2Affine.prototype.addFq2 = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.zkp.Circuit.VerificationKey.G1Affine, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zkp.Circuit.VerificationKey.G2Affine} returns this
 */
proto.zkp.Circuit.VerificationKey.G2Affine.prototype.clearFq2List = function() {
  return this.setFq2List([]);
};


/**
 * optional G1Affine alpha = 1;
 * @return {?proto.zkp.Circuit.VerificationKey.G1Affine}
 */
proto.zkp.Circuit.VerificationKey.prototype.getAlpha = function() {
  return /** @type{?proto.zkp.Circuit.VerificationKey.G1Affine} */ (
    jspb.Message.getWrapperField(this, proto.zkp.Circuit.VerificationKey.G1Affine, 1));
};


/**
 * @param {?proto.zkp.Circuit.VerificationKey.G1Affine|undefined} value
 * @return {!proto.zkp.Circuit.VerificationKey} returns this
*/
proto.zkp.Circuit.VerificationKey.prototype.setAlpha = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zkp.Circuit.VerificationKey} returns this
 */
proto.zkp.Circuit.VerificationKey.prototype.clearAlpha = function() {
  return this.setAlpha(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zkp.Circuit.VerificationKey.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional G2Affine beta = 2;
 * @return {?proto.zkp.Circuit.VerificationKey.G2Affine}
 */
proto.zkp.Circuit.VerificationKey.prototype.getBeta = function() {
  return /** @type{?proto.zkp.Circuit.VerificationKey.G2Affine} */ (
    jspb.Message.getWrapperField(this, proto.zkp.Circuit.VerificationKey.G2Affine, 2));
};


/**
 * @param {?proto.zkp.Circuit.VerificationKey.G2Affine|undefined} value
 * @return {!proto.zkp.Circuit.VerificationKey} returns this
*/
proto.zkp.Circuit.VerificationKey.prototype.setBeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zkp.Circuit.VerificationKey} returns this
 */
proto.zkp.Circuit.VerificationKey.prototype.clearBeta = function() {
  return this.setBeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zkp.Circuit.VerificationKey.prototype.hasBeta = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional G2Affine gamma = 3;
 * @return {?proto.zkp.Circuit.VerificationKey.G2Affine}
 */
proto.zkp.Circuit.VerificationKey.prototype.getGamma = function() {
  return /** @type{?proto.zkp.Circuit.VerificationKey.G2Affine} */ (
    jspb.Message.getWrapperField(this, proto.zkp.Circuit.VerificationKey.G2Affine, 3));
};


/**
 * @param {?proto.zkp.Circuit.VerificationKey.G2Affine|undefined} value
 * @return {!proto.zkp.Circuit.VerificationKey} returns this
*/
proto.zkp.Circuit.VerificationKey.prototype.setGamma = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zkp.Circuit.VerificationKey} returns this
 */
proto.zkp.Circuit.VerificationKey.prototype.clearGamma = function() {
  return this.setGamma(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zkp.Circuit.VerificationKey.prototype.hasGamma = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional G2Affine delta = 4;
 * @return {?proto.zkp.Circuit.VerificationKey.G2Affine}
 */
proto.zkp.Circuit.VerificationKey.prototype.getDelta = function() {
  return /** @type{?proto.zkp.Circuit.VerificationKey.G2Affine} */ (
    jspb.Message.getWrapperField(this, proto.zkp.Circuit.VerificationKey.G2Affine, 4));
};


/**
 * @param {?proto.zkp.Circuit.VerificationKey.G2Affine|undefined} value
 * @return {!proto.zkp.Circuit.VerificationKey} returns this
*/
proto.zkp.Circuit.VerificationKey.prototype.setDelta = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zkp.Circuit.VerificationKey} returns this
 */
proto.zkp.Circuit.VerificationKey.prototype.clearDelta = function() {
  return this.setDelta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zkp.Circuit.VerificationKey.prototype.hasDelta = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated G1Affine gamma_abc = 5;
 * @return {!Array<!proto.zkp.Circuit.VerificationKey.G1Affine>}
 */
proto.zkp.Circuit.VerificationKey.prototype.getGammaAbcList = function() {
  return /** @type{!Array<!proto.zkp.Circuit.VerificationKey.G1Affine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zkp.Circuit.VerificationKey.G1Affine, 5));
};


/**
 * @param {!Array<!proto.zkp.Circuit.VerificationKey.G1Affine>} value
 * @return {!proto.zkp.Circuit.VerificationKey} returns this
*/
proto.zkp.Circuit.VerificationKey.prototype.setGammaAbcList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.zkp.Circuit.VerificationKey.G1Affine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zkp.Circuit.VerificationKey.G1Affine}
 */
proto.zkp.Circuit.VerificationKey.prototype.addGammaAbc = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.zkp.Circuit.VerificationKey.G1Affine, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zkp.Circuit.VerificationKey} returns this
 */
proto.zkp.Circuit.VerificationKey.prototype.clearGammaAbcList = function() {
  return this.setGammaAbcList([]);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.zkp.Circuit.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zkp.Circuit} returns this
 */
proto.zkp.Circuit.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes program = 2;
 * @return {!(string|Uint8Array)}
 */
proto.zkp.Circuit.prototype.getProgram = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes program = 2;
 * This is a type-conversion wrapper around `getProgram()`
 * @return {string}
 */
proto.zkp.Circuit.prototype.getProgram_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProgram()));
};


/**
 * optional bytes program = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProgram()`
 * @return {!Uint8Array}
 */
proto.zkp.Circuit.prototype.getProgram_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProgram()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.zkp.Circuit} returns this
 */
proto.zkp.Circuit.prototype.setProgram = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string contract = 3;
 * @return {string}
 */
proto.zkp.Circuit.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zkp.Circuit} returns this
 */
proto.zkp.Circuit.prototype.setContract = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes pk = 4;
 * @return {!(string|Uint8Array)}
 */
proto.zkp.Circuit.prototype.getPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes pk = 4;
 * This is a type-conversion wrapper around `getPk()`
 * @return {string}
 */
proto.zkp.Circuit.prototype.getPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPk()));
};


/**
 * optional bytes pk = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPk()`
 * @return {!Uint8Array}
 */
proto.zkp.Circuit.prototype.getPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.zkp.Circuit} returns this
 */
proto.zkp.Circuit.prototype.setPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional VerificationKey vk = 5;
 * @return {?proto.zkp.Circuit.VerificationKey}
 */
proto.zkp.Circuit.prototype.getVk = function() {
  return /** @type{?proto.zkp.Circuit.VerificationKey} */ (
    jspb.Message.getWrapperField(this, proto.zkp.Circuit.VerificationKey, 5));
};


/**
 * @param {?proto.zkp.Circuit.VerificationKey|undefined} value
 * @return {!proto.zkp.Circuit} returns this
*/
proto.zkp.Circuit.prototype.setVk = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zkp.Circuit} returns this
 */
proto.zkp.Circuit.prototype.clearVk = function() {
  return this.setVk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zkp.Circuit.prototype.hasVk = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.zkp);
